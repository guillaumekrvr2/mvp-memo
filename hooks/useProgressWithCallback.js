//hooks/useProgressWithCallback.js
import { useRef, useEffect, useState } from 'react'
import { Animated, Easing } from 'react-native'

/**
 * Fait progresser une valeur animÃ©e [0â†’1], puis appelle callback.
 * @param {number} durationSec DurÃ©e de l'anim en secondes
 * @param {() => void} onComplete Ce qu'on fait quand c'est fini
 * @returns {Animated.Value} La valeur animÃ©e Ã  passer au ProgressBar
 */
export default function useProgressWithCallback(durationSec, onComplete) {
  const progress = useRef(new Animated.Value(0)).current
  const callbackRef = useRef(onComplete)
  const [isMounted, setIsMounted] = useState(true)
  const animationRef = useRef(null) // ðŸ†• Ref pour l'animation

  // Mettre Ã  jour la rÃ©fÃ©rence du callback sans redÃ©marrer l'animation
  useEffect(() => {
    callbackRef.current = onComplete
  }, [onComplete])

  // Suivre l'Ã©tat montÃ© du composant
  useEffect(() => {
    setIsMounted(true)
    return () => {
      setIsMounted(false)
      // ðŸ†• Cleanup supplÃ©mentaire : annuler le callback pour empÃªcher les navigations fantÃ´mes
      callbackRef.current = null
    }
  }, [])

  useEffect(() => {
    progress.setValue(0)
    const animation = Animated.timing(progress, {
      toValue: 1,
      duration: durationSec * 1000,
      easing: Easing.linear,
      useNativeDriver: false,
    })

    animationRef.current = animation // ðŸ†• Sauvegarder la ref de l'animation

    animation.start(({ finished }) => {
      // ðŸ†• Double vÃ©rification : isMounted ET callbackRef existe
      if (finished && isMounted && callbackRef.current) {
        callbackRef.current()
      }
    })

    // Cleanup amÃ©liorÃ© : stop explicite de l'animation
    return () => {
      if (animationRef.current) {
        animationRef.current.stop() // ðŸ†• Stop explicite via la ref
        animationRef.current = null
      }
    }
  }, [durationSec, progress]) // âœ… RetirÃ© isMounted - ne doit pas relancer l'animation

  return progress
}
